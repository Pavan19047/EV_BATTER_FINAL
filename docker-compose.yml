# docker-compose.yml - EV Digital Twin Infrastructure

networks:
  twin-net:
    driver: bridge

services:
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: timescaledb
    environment:
      POSTGRES_USER: twin
      POSTGRES_PASSWORD: twin_pass
      POSTGRES_DB: twin_data
    ports:
      - "5432:5432"
    networks:
      - twin-net
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./infra/create_telemetry_table.sql:/docker-entrypoint-initdb.d/01_schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U twin -d twin_data"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.2.4
    container_name: redpanda
    command:
      - redpanda
      - start
      - --smp
      - "1"
      - --memory
      - "1G"
      - --reserve-memory
      - "0M"
      - --overprovisioned
      - --node-id
      - "0"
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - twin-net
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy:.*true' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - twin-net
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.16.2
    container_name: mlflow
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root /mlflow/artifacts
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
    ports:
      - "5000:5000"
    networks:
      - twin-net
    volumes:
      - mlflow-data:/mlflow
    depends_on:
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # MQTT broker using Eclipse Mosquitto (lighter alternative to ThingsBoard)
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: mosquitto
    ports:
      - "1883:1883"
      - "9002:9001"
    networks:
      - twin-net
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-logs:/mosquitto/log
    restart: unless-stopped
    command: mosquitto -c /mosquitto-no-auth.conf
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - twin-net
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    networks:
      - twin-net
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ev-live-predictor service commented out - run manually for development
  # Uncomment this section to run predictor as a container
  # ev-live-predictor:
  #   build:
  #     context: .
  #     dockerfile_inline: |
  #       FROM python:3.12-slim
  #       WORKDIR /app
  #       COPY requirements.txt .
  #       RUN pip install --no-cache-dir -r requirements.txt
  #       COPY src/ ./src/
  #       COPY models/ ./models/
  #       CMD ["python", "-u", "src/inference/live_predictor.py", "--interval", "5", "--metrics-port", "9100", "--write-back"]
  #   container_name: ev-live-predictor
  #   environment:
  #     PYTHONUNBUFFERED: "1"
  #     PG_HOST: timescaledb
  #     PG_PORT: "5432"
  #     PG_USER: twin
  #     PG_PASSWORD: twin_pass
  #     PG_DATABASE: twin_data
  #     MQTT_HOST: thingsboard
  #     MQTT_PORT: "1883"
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - twin-net
  #   depends_on:
  #     timescaledb:
  #       condition: service_healthy
  #     thingsboard:
  #       condition: service_started
  #   restart: unless-stopped
  #   volumes:
  #     - ./models:/app/models:ro
  #     - ./mlruns:/app/mlruns:ro

volumes:
  timescale-data:
  minio-data:
  mlflow-data:
  mosquitto-data:
  mosquitto-logs:
  prometheus-data:
  grafana-data:
